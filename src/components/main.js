import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import * as Blockly from "blockly";
import { javascriptGenerator } from "blockly/javascript";
import "../main.css";

// тЬЕ Import Blocks р╣Бр╕ер╕░ Generator
import "../blockly/blocks";
import "../blockly/generator";
const blockDescriptions = {
  set_url: `
<b>ЁЯМР Test Website URL</b><br><br>
р╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕│р╕лр╕Щр╕Ф URL р╕Вр╕нр╕Зр╣Ар╕зр╣Зр╕Ър╣Др╕Лр╕Хр╣Мр╕Чр╕╡р╣Ир╕Ир╕░р╕Чр╕Фр╕кр╕нр╕Ъ<br><br>

<b>ЁЯТб р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│:</b><br>
р╕Др╕╕р╕Ур╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Кр╣Й <code>localtunnel (lt)</code> р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Ыр╕┤р╕Фр╣Ар╕зр╣Зр╕Ър╕Ир╕▓р╕Бр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Вр╕нр╕Зр╕Др╕╕р╕У (localhost) р╕нр╕нр╕Бр╕кр╕╣р╣Ир╕нр╕┤р╕Щр╣Ар╕Чр╕нр╕гр╣Мр╣Ар╕Щр╣Зр╕Хр╣Др╕Фр╣Й<br><br>

<b>ЁЯУЛ р╕Вр╕▒р╣Йр╕Щр╕Хр╕нр╕Щр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ:</b>
<ol>
  <li>р╣Ар╕Ыр╕┤р╕Ф Terminal р╕лр╕гр╕╖р╕н Command Prompt</li>
  <li>р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З LocalTunnel (р╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з):<br>
    <code>npm install -g localtunnel</code>
  </li>
  <li>р╕гр╕▒р╕Щр╣Бр╕нр╕Ыр╕Вр╕нр╕Зр╕Др╕╕р╕У (р╣Ар╕Кр╣Ир╕Щ React, Flask, Node.js) р╕Ър╕Щр╕Юр╕нр╕гр╣Мр╕Хр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф р╣Ар╕Кр╣Ир╕Щ <code>3000</code> р╕лр╕гр╕╖р╕н <code>5000</code></li>
  <li>р╣Ар╕Ыр╕┤р╕Ф tunnel р╣Др╕Ыр╕вр╕▒р╕Зр╕Юр╕нр╕гр╣Мр╕Хр╕Чр╕╡р╣Ир╣Бр╕нр╕Ыр╕гр╕▒р╕Щр╕нр╕вр╕╣р╣И р╣Ар╕Кр╣Ир╕Щ:<br>
    <code>lt --port 3000</code><br>
    р╕лр╕гр╕╖р╕н <code>lt --port 5000</code>
  </li>
  <li>р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Кр╕╖р╣Ир╕н URL р╕Чр╕╡р╣Ир╕Ир╕│р╕Зр╣Ир╕▓р╕в р╣Гр╕лр╣Йр╣Ар╕Юр╕┤р╣Ир╕б:<br>
    <code>lt --port 3000 --subdomain myappdemo</code>
  </li>
</ol>

<b>ЁЯУМ р╕зр╕┤р╕Шр╕╡р╕Фр╕╣р╕зр╣Ир╕▓р╣Бр╕нр╕Ыр╕гр╕▒р╕Щр╕нр╕вр╕╣р╣Ир╕Чр╕╡р╣Ир╕Юр╕нр╕гр╣Мр╕Хр╣Др╕лр╕Щ:</b>
<ul>
  <li>р╕лр╕▓р╕Бр╕Др╕╕р╕Ур╕гр╕▒р╕Щ React: р╕кр╣Ир╕зр╕Щр╣Гр╕лр╕Нр╣Ир╕Ир╕░р╣Ар╕Ыр╣Зр╕Щ <code>http://localhost:3000</code></li>
  <li>р╕Цр╣Йр╕▓р╣Ар╕Ыр╣Зр╕Щ Flask: р╣Вр╕Фр╕вр╕Чр╕▒р╣Ир╕зр╣Др╕Ыр╕Ир╕░р╕гр╕▒р╕Щр╕Чр╕╡р╣И <code>http://127.0.0.1:5000</code></li>
  <li>р╕лр╕гр╕╖р╕нр╕Фр╕╣р╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Гр╕Щ Terminal р╣Ар╕Кр╣Ир╕Щ<br>
    <code>App listening on http://localhost:8000</code> = р╣Гр╕Кр╣Й <code>--port 8000</code>
  </li>
</ul>

<b>ЁЯФЧ р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З URL р╕Чр╕╡р╣Ир╣Др╕Фр╣Й:</b><br>
<code>https://myappdemo.loca.lt</code><br><br>

тЬЕ р╕гр╕░р╕Ър╕Ър╕гр╕нр╕Зр╕гр╕▒р╕Ър╣Ар╕Йр╕Юр╕▓р╕░ URL р╕Чр╕╡р╣Ир╕Вр╕╢р╣Йр╕Щр╕Хр╣Йр╕Щр╕Фр╣Йр╕зр╕в <code>https://xxx.loca.lt</code>
`,
  check_sql_injection: `
<h3>ЁЯзй р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣И SQL Injection</h3>
<p>
  <strong>ЁЯУЭ р╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в:</strong> р╕Бр╕▓р╕гр╣Вр╕Ир╕бр╕Хр╕╡р╕Чр╕╡р╣Ир╣Бр╕ор╕Бр╣Ар╕Бр╕нр╕гр╣Мр╕Эр╕▒р╕Зр╕Др╕│р╕кр╕▒р╣Ир╕З SQL р╣Ар╕Вр╣Йр╕▓р╣Др╕Ыр╣Гр╕Щр╕Яр╕нр╕гр╣Мр╕бр╕лр╕гр╕╖р╕н URL<br />
  р╣Ар╕Юр╕╖р╣Ир╕нр╕ер╕зр╕Зр╣Гр╕лр╣Йр╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣Мр╕гр╕▒р╕Щр╕Др╕│р╕кр╕▒р╣Ир╕Зр╣Вр╕Фр╕вр╣Др╕бр╣Ир╕Хр╕▒р╣Йр╕Зр╣Гр╕И
</p>
<hr />
<p>
  <strong>ЁЯФН р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Чр╕Фр╕кр╕нр╕Ъ:</strong><br />
  тАв Basic Injection<br />
  тАв OR Condition<br />
  тАв UNION, DROP, Comment-based р╣Бр╕ер╕░ Blind SQLi<br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ъ Error р╣Бр╕ер╕░ Response р╣Ар╕Юр╕╖р╣Ир╕нр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Бр╕▓р╕гр╕гр╕▒р╣Ир╕зр╣Др╕лр╕ер╕Вр╕нр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
</p>

`,
  check_xss: `
<h3>ЁЯзк р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣И XSS</h3>
<p>
  <strong>ЁЯУЭ р╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в:</strong> р╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣И Cross-Site Scripting р╣Ар╕Бр╕┤р╕Фр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╣Ар╕зр╣Зр╕Ър╣Др╕Лр╕Хр╣Мр╣Др╕бр╣Ир╕Бр╕гр╕нр╕Зр╕нр╕┤р╕Щр╕Юр╕╕р╕Хр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕нр╕вр╣Ир╕▓р╕Зр╣Ар╕лр╕бр╕▓р╕░р╕кр╕б<br />
  р╕Чр╕│р╣Гр╕лр╣Йр╣Бр╕ор╕Бр╣Ар╕Бр╕нр╕гр╣Мр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Эр╕▒р╕Зр╣Вр╕Др╣Йр╕Ф JavaScript р╕ер╕Зр╣Др╕Ыр╣Гр╕Щр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ъ р╕Лр╕╢р╣Ир╕Зр╕Ир╕░р╕гр╕▒р╕Щр╣Гр╕Щр╣Ар╕Ър╕гр╕▓р╕зр╣Мр╣Ар╕Лр╕нр╕гр╣Мр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕гр╕▓р╕вр╕нр╕╖р╣Ир╕Щ
</p>
<hr />
<p>
  <strong>ЁЯФН р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Чр╕Фр╕кр╕нр╕Ъ:</strong><br />
  тАв р╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕нр╕┤р╕Щр╕Юр╕╕р╕Хр╕Бр╕ер╕▒р╕Ър╕нр╕нр╕Бр╣Др╕Ыр╕вр╕▒р╕Зр╕лр╕Щр╣Йр╕▓ HTML р╣Вр╕Фр╕вр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕г escape<br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ър╕Ьр╣Ир╕▓р╕Щ query, form, header, comment р╣Бр╕ер╕░р╕Кр╣Ир╕нр╕З bio/profile р╕Хр╣Ир╕▓р╕З р╣Ж
</p>

`,
  check_csrf: `
<h3>ЁЯФР р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣И CSRF</h3>
<p>
  <strong>ЁЯУЭ р╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в:</strong> р╕Бр╕▓р╕гр╣Вр╕Ир╕бр╕Хр╕╡р╕Чр╕╡р╣Ир╕лр╕ер╕нр╕Бр╣Гр╕лр╣Йр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щр╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕зр╕кр╣Ир╕Зр╕Др╕│р╕Вр╕нр╣Вр╕Фр╕вр╣Др╕бр╣Ир╕Хр╕▒р╣Йр╕Зр╣Гр╕И<br />
  р╣Ар╕Кр╣Ир╕Щ р╣Вр╕нр╕Щр╣Ар╕Зр╕┤р╕Щ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ р╕Ьр╣Ир╕▓р╕Щр╕ер╕┤р╕Зр╕Бр╣Мр╕Чр╕╡р╣Ир╕Эр╕▒р╕Зр╕бр╕▓
</p>
<hr />
<p>
  <strong>ЁЯФН р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Чр╕Фр╕кр╕нр╕Ъ:</strong><br />
  тАв р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕бр╕╡ CSRF Token р╕лр╕гр╕╖р╕нр╣Др╕бр╣И<br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ъ Token р╕Лр╣Йр╕│р╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И<br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ъ Token р╣Бр╕Ър╕Ъ static р╣Бр╕ер╕░ rotation<br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ъ cookie р╣Бр╕Ър╕Ъ double-submit<br />
  тАв р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕ р╣Бр╕ер╕░ Session Fixation
</p>

`,
  check_idor: `
  <h4>ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣И IDOR</h4>
  <p><strong>Insecure Direct Object References</strong> р╕Др╕╖р╕нр╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣Ир╕Чр╕╡р╣Ир╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Чр╕гр╕▒р╕Юр╕вр╕▓р╕Бр╕гр╣Вр╕Фр╕вр╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б</p>
  <hr />
  <p>ЁЯзк <strong>р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕гр╕░р╕Ър╕Ър╕Чр╕Фр╕кр╕нр╕Ъ:</strong></p>
  <ul>
    <li>р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Др╣Ир╕▓ <code>ID</code> р╣Ар╕Кр╣Ир╕Щ <code>user_id</code>, <code>file_id</code></li>
    <li>р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щр╕Ьр╣Ир╕▓р╕Щ URL</li>
    <li>р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕г <strong>р╕Вр╕▓р╕Ф Authorization</strong> р╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б</li>
  </ul>
  <p>тЭЧ <strong>р╕лр╕▓р╕Бр╕гр╕░р╕Ър╕Ър╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ</strong> р╕нр╕▓р╕Ир╣Ар╕Бр╕┤р╕Фр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З/р╣Бр╕Бр╣Йр╣Др╕Вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щр╣Др╕Фр╣Й</p>
`,
  check_bac: `
<h3>ЁЯЪл р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Кр╣Ир╕нр╕Зр╣Вр╕лр╕зр╣И Broken Access Control</h3>
<p>
  <strong>ЁЯУЭ р╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в:</strong> р╕гр╕░р╕Ър╕Ър╕Др╕зр╕Ър╕Др╕╕р╕бр╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╕Чр╕╡р╣Ир╕ер╣Йр╕бр╣Ар╕лр╕ер╕з р╣Ар╕Кр╣Ир╕Щ р╕лр╕Щр╣Йр╕▓ admin р╣Ар╕Ыр╕┤р╕Фр╣Гр╕лр╣Й user р╕Чр╕▒р╣Ир╕зр╣Др╕Ыр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Др╕Фр╣Й<br />
  р╕лр╕гр╕╖р╕нр╕Бр╕▓р╕г bypass р╕Бр╕▓р╕гр╕Ир╕│р╕Бр╕▒р╕Фр╕кр╕┤р╕Чр╕Шр╕┤р╣М р╣Ар╕Кр╣Ир╕Щ р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕Щр╕нр╕╖р╣Ир╕Щ
</p>
<hr />
<p>
  <strong>ЁЯФН р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Чр╕Фр╕кр╕нр╕Ъ:</strong><br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ъ URL р╕Чр╕╡р╣Ир╕Др╕зр╕гр╕Ир╕│р╕Бр╕▒р╕Фр╣Ар╕Йр╕Юр╕▓р╕░р╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕е<br />
  тАв р╕Чр╕Фр╕кр╕нр╕Ъ API р╕Чр╕╡р╣Ир╕Др╕зр╕гр╕Ир╕│р╕Бр╕▒р╕Фр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З<br />
  тАв р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ user р╕Шр╕гр╕гр╕бр╕Фр╕▓р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Чр╕│ action р╕Вр╕нр╕З admin р╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
</p>

`,
};
const Main = () => {
  const navigate = useNavigate();
  const blocklyDiv = useRef(null);
  const workspace = useRef(null);
  const [logoutMessage, setLogoutMessage] = useState("");
  const [username, setUsername] = useState("");
  const [blockDescription, setBlockDescription] = useState("");
  const [sidebarVisible, setSidebarVisible] = useState(false);

  useEffect(() => {
    const storedUsername = localStorage.getItem("username");
    if (storedUsername) setUsername(storedUsername);

    const cleanOldRunData = () => {
      const user = storedUsername || "anonymous";
      const today = new Date().toISOString().split("T")[0];
      Object.keys(localStorage).forEach((key) => {
        if (key.startsWith(`runTimestamps_${user}_`)) {
          const keyDate = key.split("_").pop();
          if (keyDate !== today) {
            localStorage.removeItem(key);
          }
        }
      });
    };
    cleanOldRunData();

    if (workspace.current) {
      workspace.current.dispose();
      workspace.current = null;
    }

    workspace.current = Blockly.inject(blocklyDiv.current, {
      toolbox: `
        <xml>
          <block type="set_url"></block>
          <block type="check_sql_injection"></block>
          <block type="check_xss"></block>
          <block type="check_csrf"></block>
          <block type="check_idor"></block>
          <block type="check_bac"></block>
        </xml>
      `,
      rtl: false,
      toolboxPosition: "start",
    });

    // тЬЕ р╕Яр╕▒р╕Зр╕Др╣Мр╕Кр╕▒р╕Щр╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕ер╕╖р╕нр╕Бр╕Ър╕ер╣Зр╕нр╕Б
        workspace.current.addChangeListener((event) => {
  if (event.type === Blockly.Events.SELECTED) {
    const block = workspace.current.getBlockById(event.newElementId);
    const sidebar = document.querySelector(".blockly-sidebar");

    if (block && sidebar) {
      const html = blockDescriptions[block.type] || "тД╣я╕П р╣Др╕бр╣Ир╕бр╕╡р╕Др╕│р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ър╕ер╣Зр╕нр╕Бр╕Щр╕╡р╣Й";
      setBlockDescription(html);
      sidebar.classList.add("visible");
    } else if (sidebar) {
      setBlockDescription("");
      sidebar.classList.remove("visible");
    }
  }
});


    Blockly.svgResize(workspace.current);
  }, [navigate]);

  const getTodayKey = () => {
    const today = new Date().toISOString().split("T")[0];
    const user = localStorage.getItem("username") || "anonymous";
    return `runTimestamps_${user}_${today}`;
  };

  const getRemainingTimeMessage = () => {
    const timestamps = JSON.parse(localStorage.getItem(getTodayKey()) || "[]");
    if (timestamps.length < 1000) return null;

    const now = new Date();
    const tomorrowMidnight = new Date();
    tomorrowMidnight.setHours(24, 0, 0, 0);
    const diffMs = tomorrowMidnight - now;
    if (diffMs <= 0) return null;

    const minutes = Math.ceil(diffMs / 1000 / 60);
    return `тП│ You've reached the 3-run limit today. Try again in ${minutes} minute(s).`;
  };

  const canRunTest = () => {
    const timestamps = JSON.parse(localStorage.getItem(getTodayKey()) || "[]");
    return timestamps.length < 1000;
  };

  const recordRun = () => {
    const key = getTodayKey();
    const timestamps = JSON.parse(localStorage.getItem(key) || "[]");
    timestamps.push(new Date().toISOString());
    localStorage.setItem(key, JSON.stringify(timestamps));
  };

  const generateCode = () => {
    const remainingMessage = getRemainingTimeMessage();
    if (!canRunTest()) {
      alert(remainingMessage || "тЪая╕П You've reached the maximum number of test runs for today.");
      return;
    }

    if (!workspace.current || workspace.current.getAllBlocks(false).length === 0) {
      alert("тЪая╕П No blocks found! Please add blocks before generating code.");
      return;
    }

    const allBlocks = workspace.current.getAllBlocks(false);
    let hasSetUrl = false;
    const resultKeysToCheck = [];

    allBlocks.forEach((block) => {
      if (block.type === "set_url") hasSetUrl = true;
      if (block.type === "check_sql_injection") resultKeysToCheck.push("sqlResults");
      if (block.type === "check_xss") resultKeysToCheck.push("xssResults");
      if (block.type === "check_csrf") resultKeysToCheck.push("csrfResults");
      if (block.type === "check_idor") resultKeysToCheck.push("idorResults");
      if (block.type === "check_bac") resultKeysToCheck.push("bacResults");
    });

    if (!hasSetUrl) {
      alert("тЪая╕П You must set a URL before generating code.");
      return;
    }
    const setUrlBlock = allBlocks.find(b => b.type === "set_url");
    const urlValue = setUrlBlock?.getFieldValue("URL") || "";
    if (!/^https:\/\/.*\.loca\.lt/.test(urlValue))  {
      alert("тЭМ Only loca.lt URLs are allowed. Please enter a valid https://xxx.loca.lt URL.");
      return;
    }

    if (resultKeysToCheck.length === 0) {
      alert("тЪая╕П Please add at least one security check before generating code.");
      return;
    }

    ["sqlResults", "xssResults", "csrfResults", "idorResults", "bacResults"].forEach((key) =>
      localStorage.removeItem(key)
    );

    const code = javascriptGenerator.workspaceToCode(workspace.current);
    console.log("Generated Code:", code);

    try {
      recordRun();
      eval(code);
      waitForResults(resultKeysToCheck);
    } catch (error) {
      console.error("тЭМ Execution Error:", error);
      alert("Error executing generated code!");
    }
  };

  const waitForResults = (keys) => {
    const startTime = Date.now();
    const interval = setInterval(() => {
      const allReady = keys.every((key) => {
        const val = localStorage.getItem(key);
        return val && JSON.parse(val).length > 0;
      });

      if (allReady) {
        clearInterval(interval);
        alert("тЬЕ Code executed successfully!");
        navigate("/dashboard");
      }

      if (Date.now() - startTime > 60000) {
        clearInterval(interval);
        alert("тЪая╕П Timeout: Some test results did not complete in time.");
      }
    }, 1000);
  };

  return (
    <div className="main-container">
      <div className="navbar">
        <div className="navbar-left">
          <h1>Website Security Testing ЁЯЪА</h1>
          <h1>Welcome, {username} ЁЯСЛ</h1>
          <button className="dashboard-button" onClick={() => navigate("/dashboard")}>
            Dashboard
          </button>
        </div>
        <div className="navbar-buttons">
          <button className="generate-button" onClick={generateCode}>
            Simulate
          </button>
          <button
            className="logout-button"
            onClick={() => {
              setLogoutMessage("тЬЕ Logout successful!");
              localStorage.removeItem("token");
              localStorage.removeItem("username");
              setTimeout(() => {
                setLogoutMessage("");
                navigate("/login");
              }, 1500);
            }}
          >
            Logout
          </button>
        </div>
      </div>

<div className="blockly-container">
  <div className="blockly-workspace" ref={blocklyDiv}></div>

  {/* тЬЕ Sidebar р╣Бр╕Ър╕Ър╕Юр╕▒р╕Ър╣Др╕Фр╣Й */}
  <div className={`blockly-sidebar ${sidebarVisible ? "visible" : ""}`}>
    <h3>ЁЯз╛ Block Description</h3>
    <div dangerouslySetInnerHTML={{ __html: blockDescription }} />
  </div>
</div>

</div>
  );
};

export default Main;
